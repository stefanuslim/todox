{"version":3,"sources":["theme.js","serviceWorker.js","components/snackbar.js","pages/app.js","index.js"],"names":["theme","createMuiTheme","typography","fontFamily","palette","type","primary","main","secondary","contrastThreshold","tonalOffset","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CustomSnackbar","React","useState","open","text","showActionButton","actionButtonText","actionButtonClickCallback","setState","snackbar","show","close","event","reason","handleClose","evt","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","action","Fragment","Button","color","size","onClick","e","IconButton","aria-label","fontSize","MobileDrawer","lazy","DesktopDrawer","Index","Lists","Create","Home","props","isMobile","innerWidth","breakpoints","values","sm","prevVal","addEventListener","breakpoint","className","this","classes","root","fallback","Backdrop","CircularProgress","content","toolbar","path","exact","component","Component","withStyles","display","mixins","drawerPaper","width","flexGrow","padding","spacing","onLine","pathname","img","Image","src","onload","document","body","style","backgroundImage","database","db","default","onsuccess","_evt","String","prototype","capitalize","charAt","toUpperCase","slice","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a6eeec4f.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: `-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif`\n  },\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: \"#a5ce0f\",\n    },\n    secondary: {\n      main: '#028bbf',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n});\n/*\nlight blue:#8DBBF2\npink: #FACEDF\nvery light skin: #FDEECC\nlight yellow: #FFE088\npurplish: #DC9CFD\ngreen: #9CE47C\nred: #F56A4E\nYELLOW: #f7c331\n*/\n\nexport default theme;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport Button from \"@material-ui/core/Button\"\nimport Snackbar from \"@material-ui/core/Snackbar\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport CloseIcon from \"@material-ui/icons/Close\"\n\nexport default function CustomSnackbar() {\n  const [state, setState] = React.useState({\n    open: false,\n    text: \"Snackbar text\",\n    showActionButton: false,\n    actionButtonText: \"undo\",\n    actionButtonClickCallback: null,\n  })\n\n  window.snackbar = {\n    show: ({\n      text = \"Snackbar text\",\n      actionButtonText = null,\n      showActionButton = false,\n      actionButtonClickCallback = null,\n    }) => {\n      setState({\n        open: true,\n        text,\n        actionButtonClickCallback,\n        actionButtonText,\n        showActionButton,\n      })\n    },\n    close: (event, reason) => {\n      handleClose(event, reason)\n    },\n  }\n\n  let click = (evt) => {\n    handleClose()\n    try{\n      state.actionButtonClickCallback(evt)\n    }catch(e){\n\n    }\n  }\n  let handleClose = (evt, reason) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n    setState({\n      ...state,\n      open: false,\n    })\n  }\n\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"left\",\n        }}\n        open={state.open}\n        autoHideDuration={4000}\n        onClose={handleClose}\n        message={state.text}\n        action={\n          <React.Fragment>\n            {state.showActionButton ? (\n              <Button color=\"secondary\" size=\"small\" onClick={click}>\n                {state.actionButtonText}\n              </Button>\n            ) : (\n              \"\"\n            )}\n            <IconButton\n              size=\"small\"\n              aria-label=\"close\"\n              color=\"inherit\"\n              onClick={handleClose}\n            >\n              <CloseIcon fontSize=\"small\" />\n            </IconButton>\n          </React.Fragment>\n        }\n      />\n    </div>\n  )\n}\n","import React, { Suspense } from \"react\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport { Backdrop, CircularProgress } from \"@material-ui/core\"\nimport { Switch, Route } from \"react-router-dom\"\nimport Snackbar from \"../components/snackbar\"\nimport theme from \"../theme\"\n\n//Lazy load components\nlet MobileDrawer = React.lazy(() => import(\"../components/MobileDrawer\"))\nlet DesktopDrawer = React.lazy(() => import(\"../components/DesktopDrawer\"))\n\n//Lazy load pages\nlet Index = React.lazy(() => import(\"./index\"))\nlet Lists = React.lazy(() => import(\"./lists\"))\nlet Create = React.lazy(() => import(\"./create\"))\n\nconst drawerWidth = 240\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isMobile: window.innerWidth < theme.breakpoints.values.sm,\n    }\n  }\n\n  componentDidMount() {\n    let prevVal = 0\n\n    window.addEventListener(\"resize\", () => {\n      let breakpoint = theme.breakpoints.values.sm\n      if ((breakpoint - prevVal) / (breakpoint - window.innerWidth) < 0) {\n        this.setState({ isMobile: window.innerWidth < breakpoint })\n      }\n      prevVal = window.innerWidth\n    })\n  }\n\n  render() {\n    return (\n      <div className={this.props.classes.root}>\n        <Snackbar />\n        <Suspense\n          fallback={\n            <Backdrop open={true}>\n              <CircularProgress />\n            </Backdrop>\n          }\n        >\n          {this.state.isMobile ? <MobileDrawer /> : <DesktopDrawer />}\n\n          <main className={this.props.classes.content}>\n            <div className={this.props.classes.toolbar} />\n            <Switch>\n              <Route path=\"/todox\" exact component={Index} />\n              <Route path=\"/todox/lists/:id\" component={Lists} />\n              <Route path=\"/todox/new/:id\" component={Create} />\n            </Switch>\n          </main>\n        </Suspense>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(theme => ({\n  root: {\n    display: \"flex\",\n  },\n  // necessary for content to be below app bar\n  toolbar: theme.mixins.toolbar,\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n}))(Home)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { ThemeProvider, CssBaseline } from \"@material-ui/core\"\nimport theme from \"./theme\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport App from \"./pages/app\"\n\nwindow.addEventListener(\"load\", () => {\n  if (navigator.onLine && window.location.pathname !== \"/\") {\n    let img = new Image()\n    img.src =\n      \"https://bing.biturl.top/?resolution=1920&format=image&index=0&mkt=zh-CN\"\n    img.onload = () => {\n      document.body.style.backgroundImage = \"url(\" + img.src + \")\"\n    }\n  }\n})\n\n/**\n * This creates a database if one does not exist and then adds it to \n * the window for global access.\n */\nif (!window.database) {\n  import(\"./database\").then(database => {\n    console.log(\"[indexedDB] Creating database instance\")\n    let db = new database.default();\n    db.onsuccess = _evt => {\n      window.database = db\n    }\n  })\n}\n\n//eslint-disable-next-line\nString.prototype.capitalize = function(){\n  return this.charAt(0).toUpperCase() + this.slice(1);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}