{"version":3,"sources":["components/TodoItem.js"],"names":["TodoItem","props","state","isOpen","toggleStar","bind","toggleState","markAsDone","task","markDone","done","status","window","database","update","id","unMount","then","console","log","default","onsuccess","evt","target","result","this","setState","starred","date","month","dte","Date","prefix","n","getMonth","getDate","getHours","getMinutes","delta","Math","round","className","classes","root","expanded","expandIcon","onClick","heading","title","grow","reminderTiming","secondaryHeading","reminder","parseDate","deadline","details","fullWidth","variant","secHeading3","description","othDetails","column","parseNotifDelta","notifTimeDelta","startIcon","size","color","React","Component","withStyles","theme","width","marginBottom","spacing","flexGrow","minWidth","fontSize","typography","pxToRem","palette","text","secondary","icon","verticalAlign","height","alignItems","display","flexBasis","marginLeft"],"mappings":"sRAoBMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAQ,GAEV,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBAClB,EAAKG,KAAO,EAAKP,MAAMO,KARN,E,yDAWL,IAAD,OACPC,EAAW,WACb,EAAKD,KAAKE,MAAO,EACjB,EAAKF,KAAKG,OAAS,EACnBC,OAAOC,SAASC,OAAO,QAAS,EAAKN,KAAKO,GAAI,EAAKP,MAAM,WACnD,EAAKP,MAAMe,SAAS,EAAKf,MAAMe,cAGlCJ,OAAOC,SASVJ,IARA,8BAAsBQ,MAAK,SAAAJ,GACzBK,QAAQC,IAAI,2CACZ,IAAIN,EAASO,SAAUC,UAAY,SAAAC,GACjCV,OAAOC,SAAWS,EAAIC,OAAOC,OAC7Bf,U,mCASNgB,KAAKC,SAAL,2BACKD,KAAKvB,OADV,IAEEyB,SAAUF,KAAKvB,MAAMyB,a,gCAIfC,GACR,IAEIC,EAFAC,EAAM,IAAIC,KAAKH,GACfI,EAAS,SAAAC,GAAC,OAAKA,EAAI,GAAK,IAAMA,EAAIA,GAEtC,OAAQH,EAAII,YACV,KAAK,EACHL,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,EACHA,EAAQ,MACR,MACF,KAAK,GACHA,EAAQ,MACR,MACF,KAAK,GACHA,EAAQ,MAKZ,MAAM,GAAN,OAAUG,EAAOF,EAAIK,WAArB,YAAmCN,EAAnC,YAA4CG,EAC1CF,EAAIM,YADN,YAEKJ,EAAOF,EAAIO,iB,sCAGFT,GACd,IAAIU,EAAe,GAAPV,EACZ,OAAIU,EAAQ,GACJ,GAAN,OAAUA,EAAV,eACSA,EAAQ,GAAK,GAChB,GAAN,OAAUC,KAAKC,MAAMF,EAAQ,IAA7B,iBAEM,GAAN,OAAUC,KAAKC,MAAMF,EAAK,MAA1B,oB,oCAKFb,KAAKC,SAAL,2BACKD,KAAKvB,OADV,IAEEC,QAASsB,KAAKvB,MAAMC,Y,+BAKtB,OACE,yBAAKsC,UAAWhB,KAAKxB,MAAMyC,QAAQC,MACjC,kBAAC,IAAD,CAAWC,SAAUnB,KAAKvB,MAAMC,QAC9B,kBAAC,IAAD,CACE0C,WAAY,kBAAC,IAAD,MACZC,QAASrB,KAAKnB,aAEd,kBAAC,IAAD,CAAYmC,UAAWhB,KAAKxB,MAAMyC,QAAQK,SACvCtB,KAAKjB,KAAKwC,OAEb,yBAAKP,UAAWhB,KAAKxB,MAAMyC,QAAQO,OACnC,yBAAKR,UAAWhB,KAAKxB,MAAMyC,QAAQQ,gBACjC,kBAAC,IAAD,CAAYT,UAAWhB,KAAKxB,MAAMyC,QAAQS,kBACvC1B,KAAKjB,KAAK4C,SAAW3B,KAAK4B,UAAU5B,KAAKjB,KAAK8C,UAAY,MAIjE,kBAAC,IAAD,CAAkBb,UAAWhB,KAAKxB,MAAMyC,QAAQa,SAC9C,yBAAKd,UAAWhB,KAAKxB,MAAMyC,QAAQc,WACjC,kBAAC,IAAD,CACEC,QAAQ,SACRhB,UAAWhB,KAAKxB,MAAMyC,QAAQgB,aAFhC,eAMA,6BACA,yBAAKjB,UAAWhB,KAAKxB,MAAMyC,QAAQiB,aAChClC,KAAKjB,KAAKmD,aAAe,wDAG9B,yBAAKlB,UAAWhB,KAAKxB,MAAMyC,QAAQkB,YACjC,yBAAKnB,UAAWhB,KAAKxB,MAAMyC,QAAQmB,QACjC,kBAAC,IAAD,CACEJ,QAAQ,SACRhB,UAAWhB,KAAKxB,MAAMyC,QAAQgB,aAFhC,UAMA,6BACA,yBAAKjB,UAAWhB,KAAKxB,MAAMyC,QAAQiB,aAChClC,KAAK4B,UAAU5B,KAAKjB,KAAK8C,YAG9B,yBAAKb,UAAWhB,KAAKxB,MAAMyC,QAAQmB,QACjC,kBAAC,IAAD,CACEJ,QAAQ,SACRhB,UAAWhB,KAAKxB,MAAMyC,QAAQgB,aAFhC,YAMA,6BACA,yBAAKjB,UAAWhB,KAAKxB,MAAMyC,QAAQiB,aAChClC,KAAKqC,gBAAgBrC,KAAKjB,KAAKuD,oBAKxC,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,UAAW,kBAAC,IAAD,MAAoBC,KAAK,SAA5C,UAGA,kBAAC,IAAD,CAAQD,UAAW,kBAAC,IAAD,MAAkBC,KAAK,QAAQC,MAAM,aAAxD,QAGA,kBAAC,IAAD,CACEF,UAAW,kBAAC,IAAD,MACXC,KAAK,QACLC,MAAM,UACNpB,QAASrB,KAAKlB,YAJhB,uB,GA7KW4D,IAAMC,WA4LdC,uBAAW,SAAAC,GAAK,MAAK,CAClC3B,KAAM,CACJ4B,MAAO,OACPC,aAAcF,EAAMG,QAAQ,IAE9BxB,KAAM,CACJyB,SAAU,EACVC,SAAUL,EAAMG,QAAQ,IAE1B1B,QAAS,CACP6B,SAAUN,EAAMO,WAAWC,QAAQ,KAErC3B,iBAAkB,CAChByB,SAAUN,EAAMO,WAAWC,QAAQ,IACnCZ,MAAOI,EAAMS,QAAQC,KAAKC,WAE5BvB,YAAa,CACXkB,SAAUN,EAAMO,WAAWC,QAAQ,IACnCZ,MAAOI,EAAMS,QAAQC,KAAKC,WAE5BC,KAAM,CACJC,cAAe,SACfC,OAAQ,GACRb,MAAO,IAEThB,QAAS,CACP8B,WAAY,SACZC,QAAS,SAEXzB,OAAQ,CACN0B,UAAW,UAEbrC,eAAgB,CACdyB,SAAU,eAEZnB,UAAW,CACTe,MAAO,QAETX,WAAY,CACV0B,QAAS,QAEX3B,YAAa,CACX6B,WAAYlB,EAAMG,QAAQ,OA1CfJ,CA4CXrE","file":"static/js/12.66c6b700.chunk.js","sourcesContent":["import React from \"react\"\nimport { withStyles } from \"@material-ui/core/styles\"\nimport {\n  AccordionActions,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Typography,\n  //  IconButton,\n  Divider,\n  Button,\n} from \"@material-ui/core\"\n//import { Link } from \"react-router-dom\"\nimport {\n  DeleteOutlined,\n  CheckOutlined,\n  EditOutlined,\n  ExpandMoreOutlined,\n} from \"@material-ui/icons\"\n\nclass TodoItem extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isOpen: false,\n    }\n    this.toggleStar = this.toggleStar.bind(this)\n    this.toggleState = this.toggleState.bind(this)\n    this.markAsDone = this.markAsDone.bind(this)\n    this.task = this.props.task\n  }\n\n  markAsDone() {\n    let markDone = () => {\n      this.task.done = true\n      this.task.status = 2\n      window.database.update(\"tasks\", this.task.id, this.task, () => {\n        if (this.props.unMount) this.props.unMount()\n      })\n    }\n    if (!window.database) {\n      import(\"../database\").then(database => {\n        console.log(\"[indexedDB] Creating database instance\")\n        new database.default().onsuccess = evt => {\n          window.database = evt.target.result\n          markDone()\n        }\n      })\n    } else {\n      markDone()\n    }\n  }\n\n  toggleStar() {\n    this.setState({\n      ...this.state,\n      starred: !this.state.starred,\n    })\n  }\n\n  parseDate(date) {\n    let dte = new Date(date)\n    let prefix = n => (n < 10 ? \"0\" + n : n)\n    let month\n    switch (dte.getMonth()) {\n      case 0:\n        month = \"Jan\"\n        break\n      case 1:\n        month = \"Feb\"\n        break\n      case 2:\n        month = \"Mar\"\n        break\n      case 3:\n        month = \"Apr\"\n        break\n      case 4:\n        month = \"May\"\n        break\n      case 5:\n        month = \"Jun\"\n        break\n      case 6:\n        month = \"Jul\"\n        break\n      case 7:\n        month = \"Aug\"\n        break\n      case 8:\n        month = \"Sep\"\n        break\n      case 9:\n        month = \"Oct\"\n        break\n      case 10:\n        month = \"Nov\"\n        break\n      case 11:\n        month = \"Dec\"\n        break\n      default:\n        break\n    }\n    return `${prefix(dte.getDate())} ${month} ${prefix(\n      dte.getHours()\n    )}:${prefix(dte.getMinutes())}`\n  }\n\n  parseNotifDelta(date) {\n    let delta = date * 10\n    if (delta < 60) {\n      return `${delta} min before`\n    } else if (delta / 60 < 24) {\n      return `${Math.round(delta / 60)} hr(s) before`\n    } else {\n      return `${Math.round(delta / (60 * 24))} day(s) before`\n    }\n  }\n\n  toggleState() {\n    this.setState({\n      ...this.state,\n      isOpen: !this.state.isOpen,\n    })\n  }\n\n  render() {\n    return (\n      <div className={this.props.classes.root}>\n        <Accordion expanded={this.state.isOpen}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreOutlined />}\n            onClick={this.toggleState}\n          >\n            <Typography className={this.props.classes.heading}>\n              {this.task.title}\n            </Typography>\n            <div className={this.props.classes.grow} />\n            <div className={this.props.classes.reminderTiming}>\n              <Typography className={this.props.classes.secondaryHeading}>\n                {this.task.reminder ? this.parseDate(this.task.deadline) : \"\"}\n              </Typography>\n            </div>\n          </AccordionSummary>\n          <AccordionDetails className={this.props.classes.details}>\n            <div className={this.props.classes.fullWidth}>\n              <Typography\n                variant=\"button\"\n                className={this.props.classes.secHeading3}\n              >\n                Description\n              </Typography>\n              <br />\n              <div className={this.props.classes.description}>\n                {this.task.description || <i>No description provided</i>}\n              </div>\n            </div>\n            <div className={this.props.classes.othDetails}>\n              <div className={this.props.classes.column}>\n                <Typography\n                  variant=\"button\"\n                  className={this.props.classes.secHeading3}\n                >\n                  Due At\n                </Typography>\n                <br />\n                <div className={this.props.classes.description}>\n                  {this.parseDate(this.task.deadline)}\n                </div>\n              </div>\n              <div className={this.props.classes.column}>\n                <Typography\n                  variant=\"button\"\n                  className={this.props.classes.secHeading3}\n                >\n                  Reminder\n                </Typography>\n                <br />\n                <div className={this.props.classes.description}>\n                  {this.parseNotifDelta(this.task.notifTimeDelta)}\n                </div>\n              </div>\n            </div>\n          </AccordionDetails>\n          <Divider />\n          <AccordionActions>\n            <Button startIcon={<DeleteOutlined />} size=\"small\">\n              Delete\n            </Button>\n            <Button startIcon={<EditOutlined />} size=\"small\" color=\"secondary\">\n              Edit\n            </Button>\n            <Button\n              startIcon={<CheckOutlined />}\n              size=\"small\"\n              color=\"primary\"\n              onClick={this.markAsDone}\n            >\n              Mark as done\n            </Button>\n          </AccordionActions>\n        </Accordion>\n      </div>\n    )\n  }\n}\n\nexport default withStyles(theme => ({\n  root: {\n    width: \"100%\",\n    marginBottom: theme.spacing(1),\n  },\n  grow: {\n    flexGrow: 1,\n    minWidth: theme.spacing(1),\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  secHeading3: {\n    fontSize: theme.typography.pxToRem(12),\n    color: theme.palette.text.secondary,\n  },\n  icon: {\n    verticalAlign: \"bottom\",\n    height: 20,\n    width: 20,\n  },\n  details: {\n    alignItems: \"center\",\n    display: \"block\",\n  },\n  column: {\n    flexBasis: \"33.33%\",\n  },\n  reminderTiming: {\n    minWidth: \"fit-content\",\n  },\n  fullWidth: {\n    width: \"100%\",\n  },\n  othDetails: {\n    display: \"flex\",\n  },\n  description: {\n    marginLeft: theme.spacing(1),\n  },\n}))(TodoItem)\n"],"sourceRoot":""}